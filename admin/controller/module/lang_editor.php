<?phpclass ControllerModuleLangEditor extends Controller {	private $error = array ();		public function index() {		$this->load->language ( 'module/lang_editor' );		$this->document->setTitle ( strip_tags ( $this->language->get ( 'heading_title' ) ) . '(' . $this->language->get ( 'heading_version' ) . ')' );		$this->load->model ( 'setting/setting' );				$this->data ['heading_title'] = $this->language->get ( 'heading_title' ) . '(' . $this->language->get ( 'heading_version' ) . ')';				$this->data ['text_enabled'] = $this->language->get ( 'text_enabled' );		$this->data ['text_disabled'] = $this->language->get ( 'text_disabled' );				$this->data ['entry_frontend'] = $this->language->get ( 'entry_frontend' );		$this->data ['entry_backend'] = $this->language->get ( 'entry_backend' );		$this->data ['entry_languages'] = $this->language->get ( 'entry_languages' );		$this->data ['entry_code'] = $this->language->get ( 'entry_code' );		$this->data ['entry_directory'] = $this->language->get ( 'entry_directory' );		$this->data ['entry_locale'] = $this->language->get ( 'entry_locale' );		$this->data ['entry_permissions'] = $this->language->get ( 'entry_permissions' );				$this->data ['button_edit'] = $this->language->get ( 'button_edit' );				if (isset ( $this->error ['warning'] )) {			$this->data ['error_warning'] = $this->error ['warning'];		} else {			$this->data ['error_warning'] = '';		}				$this->data ['getFrontEndCatalogPath'] = $this->getFrontEndCatalogPath ();				$this->data ['breadcrumbs'] = array ();		$this->data ['breadcrumbs'] [] = array ('text' => $this->language->get ( 'text_home' ), 'href' => $this->url->link ( 'common/home', 'token=' . $this->session->data ['token'], 'SSL' ), 'separator' => false );		$this->data ['breadcrumbs'] [] = array ('text' => $this->language->get ( 'text_module' ), 'href' => $this->url->link ( 'extension/module', 'token=' . $this->session->data ['token'], 'SSL' ), 'separator' => ' :: ' );		$this->data ['breadcrumbs'] [] = array ('text' => $this->language->get ( 'heading_title' ), 'href' => $this->url->link ( 'module/lang_editor', 'token=' . $this->session->data ['token'], 'SSL' ), 'separator' => ' :: ' );		$this->data ['action'] = $this->url->link ( 'module/lang_editor', 'token=' . $this->session->data ['token'], 'SSL' );				unset ( $this->session->data ['selected'] );		unset ( $this->session->data ['type'] );		if (isset ( $this->request->post ['selected'] ) && isset ( $this->request->post ['type'] )) {			$this->session->data ['selected'] = $this->request->post ['selected'];			$this->session->data ['type'] = $this->request->post ['type'];			$this->redirect ( $this->url->link ( 'module/lang_editor/edit', 'token=' . $this->session->data ['token'], 'SSL' ) );		} elseif ($this->request->server ['REQUEST_METHOD'] == 'POST') {			$this->data ['error_warning'] = $this->language->get ( 'error_no_selections' );		}				$this->load->model ( 'localisation/language' );		$this->data ['languages'] = $this->model_localisation_language->getLanguages ();				$this->data ['writable_main'] = '';		if (! is_writable ( $this->data ['getFrontEndCatalogPath'] . 'language' ))			$this->data ['writable_main'] .= '<li>' . $this->language->get ( 'error_unwritable' ) . ' - ' . $this->data ['getFrontEndCatalogPath'] . 'language</li>';		else			$this->data ['writable_main'] .= '';		if (! is_writable ( DIR_APPLICATION . 'language' ))			$this->data ['writable_main'] .= '<li>' . $this->language->get ( 'error_unwritable' ) . ' - ' . DIR_APPLICATION . 'language</li>';		else			$this->data ['writable_main'] .= '';				foreach ( $this->data ['languages'] as $v ) {			if (! is_dir ( $this->data ['getFrontEndCatalogPath'] . 'language/' . $v ['directory'] ))				mkdir ( $this->data ['getFrontEndCatalogPath'] . 'language/' . $v ['directory'], 0755 );			if ($this->checkPermission ( $this->data ['getFrontEndCatalogPath'] . 'language/' . $v ['directory'] ) == 'error_unwritable') {				$this->data ['writable'] [$v ['code']] ['front'] = '<span class="error">' . $this->language->get ( 'entry_frontend' ) . ': ' . $this->language->get ( 'error_unwritable' ) . '</span>';			} else {				$this->data ['writable'] [$v ['code']] ['front'] = '<span class="error" style="color:#777">' . $this->language->get ( 'entry_frontend' ) . ': ' . $this->language->get ( 'error_writable' ) . '</span>';			}						if (! is_dir ( DIR_APPLICATION . 'language/' . $v ['directory'] ))				mkdir ( DIR_APPLICATION . 'language/' . $v ['directory'], 0755 );			if ($this->checkPermission ( DIR_APPLICATION . 'language/' . $v ['directory'] ) == 'error_unwritable') {				$this->data ['writable'] [$v ['code']] ['back'] = '<span class="error">' . $this->language->get ( 'entry_backend' ) . ': ' . $this->language->get ( 'error_unwritable' ) . '</span>';			} else {				$this->data ['writable'] [$v ['code']] ['back'] = '<span class="error" style="color:#777">' . $this->language->get ( 'entry_backend' ) . ': ' . $this->language->get ( 'error_writable' ) . '</span>';			}		}				$this->template = 'module/lang_editor_list.tpl';		$this->children = array ('common/header', 'common/footer' );				$this->response->setOutput ( $this->render () );	}		public function edit() {				if (! isset ( $this->session->data ['selected'] ))			$this->redirect ( $this->url->link ( 'module/lang_editor', 'token=' . $this->session->data ['token'], 'SSL' ) );				$this->load->language ( 'module/lang_editor' );		$this->document->setTitle ( strip_tags ( $this->language->get ( 'heading_title' ) ) . '(' . $this->language->get ( 'heading_version' ) . ')' );		$this->load->model ( 'setting/setting' );				$this->data ['heading_title'] = $this->language->get ( 'heading_title' ) . '(' . $this->language->get ( 'heading_version' ) . ')';				$this->data ['text_enabled'] = $this->language->get ( 'text_enabled' );		$this->data ['text_disabled'] = $this->language->get ( 'text_disabled' );				$this->data ['entry_frontend'] = $this->language->get ( 'entry_frontend' );		$this->data ['entry_backend'] = $this->language->get ( 'entry_backend' );		$this->data ['entry_languages'] = $this->language->get ( 'entry_languages' );		$this->data ['entry_code'] = $this->language->get ( 'entry_code' );		$this->data ['entry_directory'] = $this->language->get ( 'entry_directory' );		$this->data ['entry_locale'] = $this->language->get ( 'entry_locale' );		$this->data ['entry_permissions'] = $this->language->get ( 'entry_permissions' );		$this->data ['entry_showhide'] = $this->language->get ( 'entry_showhide' );		$this->data ['entry_showhideall'] = $this->language->get ( 'entry_showhideall' );		$this->data ['entry_saving'] = $this->language->get ( 'entry_saving' );		$this->data ['entry_saved'] = $this->language->get ( 'entry_saved' );				$this->data ['button_save'] = $this->language->get ( 'button_save' );		$this->data ['redirect'] = $this->url->link ( 'module/lang_editor', 'token=' . $this->session->data ['token'], 'SSL' );				if (isset ( $this->error ['warning'] )) {			$this->data ['error_warning'] = $this->error ['warning'];		} else {			$this->data ['error_warning'] = '';		}				$this->request->post ['selected'] = $this->session->data ['selected'];		$this->request->post ['type'] = $this->session->data ['type'];				$this->data ['getFrontEndCatalogPath'] = $this->getFrontEndCatalogPath ();				$this->data ['breadcrumbs'] = array ();		$this->data ['breadcrumbs'] [] = array ('text' => $this->language->get ( 'text_home' ), 'href' => $this->url->link ( 'common/home', 'token=' . $this->session->data ['token'], 'SSL' ), 'separator' => false );		$this->data ['breadcrumbs'] [] = array ('text' => $this->language->get ( 'text_module' ), 'href' => $this->url->link ( 'extension/module', 'token=' . $this->session->data ['token'], 'SSL' ), 'separator' => ' :: ' );		$this->data ['breadcrumbs'] [] = array ('text' => $this->language->get ( 'heading_title' ), 'href' => $this->url->link ( 'module/lang_editor', 'token=' . $this->session->data ['token'], 'SSL' ), 'separator' => ' :: ' );		$this->data ['action'] = $this->url->link ( 'module/lang_editor/save', 'token=' . $this->session->data ['token'], 'SSL' );				//die($this->data ['getFrontEndCatalogPath']);		if ($this->request->post ['type'] == 'front') {			$this->data ['entry_title'] = $this->language->get ( 'entry_frontend' );			$this->data ['end_side'] = $this->data ['getFrontEndCatalogPath'] . 'language/';		} elseif ($this->request->post ['type'] == 'back') {			$this->data ['entry_title'] = $this->language->get ( 'entry_backend' );			$this->data ['end_side'] = DIR_APPLICATION . 'language/';		}				foreach ( $this->request->post ['selected'] as $v ) {			if (! is_dir ( $this->data ['end_side'] . $v ))				mkdir ( $this->data ['end_side'] . $v, 0755 );			$files_end [] = $this->getStructure ( $this->data ['end_side'] . $v );		}		$this->data ['paths_array'] = $this->getUniquePath ( $files_end );		foreach ( $this->request->post ['selected'] as $v ) {			foreach ( $this->data ['paths_array'] as $end_value ) {				$end_file = $this->data ['end_side'] . $v . '/' . $end_value;				$end_file_folder = preg_replace ( '/\/\w+\.php/', '', trim ( $end_file ) );				if (! is_dir ( $end_file_folder ))					mkdir ( $end_file_folder, 0755 );			}		}				$this->template = 'module/lang_editor_form.tpl';		$this->children = array ('common/header', 'common/footer' );				$this->response->setOutput ( $this->render () );	}		public function save() {		$this->load->language ( 'module/lang_editor' );		$this->load->model ( 'setting/setting' );				$this->data ['getFrontEndCatalogPath'] = $this->getFrontEndCatalogPath ();				if ($this->request->post ['type'] == 'front') {			$this->data ['end_side'] = $this->data ['getFrontEndCatalogPath'] . 'language/';		} elseif ($this->request->post ['type'] == 'back') {			$this->data ['end_side'] = DIR_APPLICATION . 'language/';		}				$msg = 1;				foreach ( $this->request->post ['data'] as $k => $v ) {			if ($this->request->post ['path'] == '#main_file') {				$save_file_path = $this->data ['end_side'] . $k . '/' . $k . '.php';			} else {				$save_file_path = $this->data ['end_side'] . $k . '/' . $this->request->post ['path'];			}			if (! file_exists ( $save_file_path ))				file_put_contents ( $save_file_path, '' );						$text = '<?php' . "\n";			foreach ( $this->request->post ['data'] {$k} as $lang_var => $lang_value ) {				if ($lang_value)					$text .= '$_[\'' . $lang_var . '\']' . "\t" . '=' . "\t" . '\'' . htmlspecialchars_decode ( str_replace ( "'", "\'", str_replace ( "\r\n", " ", $lang_value ) ) ) . '\';' . "\n";			}			$text .= '?>';			if (! file_put_contents ( $save_file_path, $text ))				$msg ++;		}		if ($msg == 1)			echo 'ok';		else			echo 'error';	}		private function getStructure($dir) {		$listDir = array ();		if ($handler = opendir ( $dir )) {			while ( ($sub = readdir ( $handler )) !== FALSE ) {				if ($sub != "." && $sub != ".." && $sub != "Thumb.db" && $sub != "Thumbs.db") {					if (is_file ( $dir . "/" . $sub )) {						$path_info = pathinfo ( $sub );						if ($path_info ['extension'] == 'php')							$listDir [] = $sub;					} elseif (is_dir ( $dir . "/" . $sub )) {						$listDir [$sub] = $this->getStructure ( $dir . "/" . $sub );					}				}			}			closedir ( $handler );		}		return $listDir;	}		private function getUniquePath($arr) {		foreach ( $arr as $k_folders => $folders ) {			foreach ( $folders as $k_files => $files ) {				if (is_array ( $files ))					foreach ( $files as $file ) {						if (! is_array ( $file ))							$path_arr [] = $k_files . '/' . $file;					}			}		}		$path_arr = array_unique ( $path_arr );		sort ( $path_arr );		return $path_arr;	}		private function checkPermission($dir) {		if (! is_writable ( $dir ))			return 'error_unwritable';				if ($handler = opendir ( $dir )) {			while ( ($sub = readdir ( $handler )) !== FALSE ) {				if ($sub != "." && $sub != ".." && $sub != "Thumb.db" && $sub != "Thumbs.db") {					if (is_file ( $dir . "/" . $sub )) {						if (! is_writable ( $dir . "/" . $sub ))							return 'error_unwritable';					} elseif (is_dir ( $dir . "/" . $sub )) {						$dir2 = $dir . "/" . $sub;						if (! is_writable ( $dir2 ))							return 'error_unwritable';												if ($handler2 = opendir ( $dir2 )) {							while ( ($sub2 = readdir ( $handler2 )) !== FALSE ) {								if ($sub2 != "." && $sub2 != ".." && $sub2 != "Thumb.db" && $sub2 != "Thumbs.db") {									if (! is_writable ( $dir2 . "/" . $sub2 ))										return 'error_unwritable';								}							}							closedir ( $handler2 );						}						$this->checkPermission ( $dir . "/" . $sub );					}				}			}			closedir ( $handler );		}	}		private function getFrontEndCatalogPath() {		/*$file = file ( '../config.php' );		foreach ( $file as $v ) {			if (strstr ( $v, 'DIR_APPLICATION' )) {				$path = explode ( "'", $v );			}		}		return $path [3];*/				/* die(DIR_APPLICATION . '_345');		return DIR_APPLICATION; */				return getcwd() . '/../catalog/';	}		private function isMultiArray($a) {		foreach ( $a as $v ) {			if (is_array ( $v ))				return true;		}		return false;	}		public function showFiles($arr) {		if ($this->isMultiArray ( $arr ))			ksort ( $arr );		else			sort ( $arr );		foreach ( $arr as $k => $v ) {			if (is_array ( $v )) {				ksort ( $v );				echo '<div style="border:1px solid #ccc;margin:20px;"><h3>' . $k . '</h3>';				echo '' . $this->showFiles ( $v ) . '</div>';			} else {				echo '<div>' . $v . '</div>';			}		}	}		public function getFileVarsByLang($file, $lang_array, $end_side) {		ob_start ();		$vars_list = array ();		foreach ( $lang_array as $lang ) {			if ($file == '#main_file')				include $end_side . $lang . '/' . $lang . '.php';			else				@include $end_side . $lang . '/' . $file;			$gdv = get_defined_vars ();			if (@is_array ( $gdv ['_'] ))				foreach ( $gdv ['_'] as $k => $v ) {					$vars_list [] = $k;				}		}		ob_end_clean ();				return array_unique ( $vars_list );	}		public function getFileValuesByLang($file, $lang_array, $end_side) {		ob_start ();		$vals_list = array ();		foreach ( $lang_array as $lang ) {			if ($file == '#main_file')				include $end_side . $lang . '/' . $lang . '.php';			else				@include $end_side . $lang . '/' . $file;			$gdv = get_defined_vars ();			if (@is_array ( $gdv ['_'] ))				foreach ( $gdv ['_'] as $k => $v ) {					$vals_list {$lang} {$k} = $v;					unset ( $_ {$k} );				}		}		ob_end_clean ();				return $vals_list;	}}?>